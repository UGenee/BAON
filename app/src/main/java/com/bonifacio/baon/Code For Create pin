package com.bonifacio.baon;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class PinActivity extends AppCompatActivity {
    private static final int MAX_ATTEMPTS = 3;
    private static final long LOCK_OUT_TIME = 30 * 1000; // 30 seconds in milliseconds
    private static final String SAVED_STATE_KEY = "savedState";
    private EditText inputPin;
    private Button enterButton;
    private int attemptCount;
    private boolean isSetupPin;
    private long lockOutTime;

    @SuppressLint("WrongViewCast")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pinscreen);

        inputPin = findViewById(R.id.enter_pin);
        enterButton = findViewById(R.id.btn_enter);

        if (savedInstanceState == null) {
            isSetupPin = true;
        } else {
            isSetupPin = savedInstanceState.getBoolean(SAVED_STATE_KEY);
            attemptCount = savedInstanceState.getInt("attemptCount");
            lockOutTime = savedInstanceState.getLong("lockOutTime");
        }

        updateButtonState();

        for (int i = 1; i <= 9; i++) {
            setNumberButtonClickListener((Button) findViewById(getResources().getIdentifier("btn_" + i, "id", getPackageName())), String.valueOf(i));
        }

        ImageView eraseButton = findViewById(R.id.btn_enter);
        eraseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String currentInput = inputPin.getText().toString();
                if (!currentInput.isEmpty()) {
                    inputPin.setText(currentInput.substring(0, currentInput.length() - 1));
                }
            }
        });

        enterButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (System.currentTimeMillis() < lockOutTime) {
                    Toast.makeText(PinActivity.this, "Too many attempts. Please wait " + (lockOutTime - System.currentTimeMillis()) / 1000 + " seconds.", Toast.LENGTH_SHORT).show();
                    return;
                }

                if (isSetupPin) {
                    String enteredPin = inputPin.getText().toString();
                    if (enteredPin.length() == 4) {
                        isSetupPin = false;
                        attemptCount = 0;
                        Toast.makeText(PinActivity.this, "Pin set successfully!", Toast.LENGTH_SHORT).show();
                        enterButton.setText("Validate Pin");
                    } else {
                        Toast.makeText(PinActivity.this, "Pin must be 4 digits long.", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    String enteredPin = inputPin.getText().toString();
                    if (enteredPin.equals("1234")) { // replace with the stored hash value of the user's pin
                        startActivity(new Intent(PinActivity.this, MainActivity.class));
                        finish();
                    } else {
                        attemptCount++;
                        Toast.makeText(PinActivity.this, "Pin incorrect. Attempts left: " + (MAX_ATTEMPTS - attemptCount), Toast.LENGTH_SHORT).show();
                        if (attemptCount >= MAX_ATTEMPTS) {
                            lockOutTime = System.currentTimeMillis() + LOCK_OUT_TIME;
                            Toast.makeText(PinActivity.this, "Too many attempts. Please wait 30 seconds.", Toast.LENGTH_SHORT).show();
                            new CountDownTimer(LOCK_OUT_TIME, 1000) {
                                @Override
                                public void onTick(long millisUntilFinished) {
                                    // not used
                                }

                                @Override
                                public void onFinish() {
                                    updateButtonState();
                                }
                            }.start();
                        }
                    }
                }
            }
        });
    }

    private void updateButtonState() {
        enterButton.setEnabled(System.currentTimeMillis() >= lockOutTime);
    }

    private void setNumberButtonClickListener(Button button, String number) {
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (inputPin.length() < 4) {
                    String currentInput = inputPin.getText().toString();
                    inputPin.setText(currentInput + number);
                }
            }
        });
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putBoolean(SAVED_STATE_KEY, isSetupPin);
        outState.putInt("attemptCount", attemptCount);
        outState.putLong("lockOutTime", lockOutTime);
    }
}